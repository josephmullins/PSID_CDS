select(MID) %>%
unique()
C <- child_record %>% #<- this matches the sample from before. All good.
inner_join(mother_index)
PC <- read.csv("../../data-cds/assessments/PCG-PC-clean.csv") %>% mutate(X=NULL)
MakePanel <- function(d) {
year <- (d$CAH7[1]+18):2017
Ny <- length(year)
knum = d$CAH108[1]
age_youngest <- integer(Ny) -1
age_oldest <- integer(Ny) + Inf
num_0_5 <- integer(Ny)
num_6_12 <- integer(Ny)
num_child <- integer(Ny)
age_mother = year-d$CAH7[1]
for (i in 1:length(year)) {
ay = Inf
ao = -1
a5 = 0
a6 = 0
for (k in 1:nrow(d)) {
agek = year[i]-d$CAH15[k]
if (agek>=0 & agek<=18) {
#print(agek)
ay = min(ay,agek)
ao = max(ao,agek)
num_child[i]  = num_child[i] + 1
}
if (agek>=0 & agek<=5) {
a5 = a5 + 1
}
if (agek>5 & agek<=12) {
a6 = a6 + 1
}
}
age_youngest[i] = ay
age_oldest[i] = ao
num_0_5[i] = a5
num_6_12[i] = a6
}
data.frame(MID = d$MID[1], age_mother=age_mother, year = year, knum = knum, num_child=num_child,age_youngest=age_youngest,age_oldest=age_oldest, num_0_5 = num_0_5, num_6_12 = num_6_12, y_first = d$CAH15[1])
}
D <- C %>%
group_by(MID) %>%
do(MakePanel(.)) %>%
filter(y_first>=1960) %>%
left_join(PC) # Add mother's cognitive score
Do <- D
M2 <- read.csv("~/Dropbox/JPE_Child_Devp_2020/PSID/CleanData/MotherPanelCDS.csv") %>%
mutate(X=NULL) %>%
filter(year>=1985,year<=2002)
D1 <- D %>% filter(year>=1985,year<=2002)
M2 %>%
select(MID,year) %>%
anti_join(D1) %>% #<- find members of M2 not in D
#merge(m1) %>% #<- check which of these are those in the final M1 but not in M2
nrow()
Ind = read.csv("../../data-main/identifiers/identifiers-panel.csv") %>%
mutate(X = NULL) %>%
mutate(MID = intnum68*1000 + pernum,mar_stat = mpair>0)
Ind <- Ind %>% filter(year>=1999) %>%
mutate(year = year - 1) %>%
rbind(Ind)
# this will be useful throughout: create a dataframe that maps mothers to their interview number and sequence number
D_Ind <- D %>%
inner_join(Ind)
# state codes measures residence for survey year
state_codes = read.csv("../../StateCodes.csv") %>%
mutate(X=NULL,X.1 = NULL) %>% #<- this is a simple crosswalk of state codes
select(-state) %>%
rename(state = PSID, StFIPS = fips) %>% #<- we rename some things in order to do the merge properly
select(state,StFIPS,SOI)
# child care expenditures are for previous year, so we have to be careful how we do the merge!
# we merge by survey year then subtract one year to make the reference correct
# then we drop intnum, using only MID and year to link with the main file in the next step
ch_care <- read.csv("~/Dropbox/PSID_CDS/PSID_CLEAN/Main_childcare.csv") %>%
mutate(X=NULL) %>%
inner_join(D_Ind) %>% #<- merge to mother's through the panel file
mutate(year = year-1) %>% #<- convert survey year to lag year
select(MID,year,childcare_exp)
D <- read.csv("../../data-main/state/state-vertical.csv") %>% #<- state of residence panel data
mutate(X=NULL) %>%
right_join(Ind) %>% #<- merge with Individual file
right_join(D) %>% #<- merge with the panel we created (keeping all years)
arrange(MID,year) %>%
group_by(MID) %>%
fill(state,.direction = "downup") %>% #<- fill in missing observations
merge(state_codes) %>% #<- merge in the cross-walk with FIPS codes and SOI codes
left_join(ch_care) #<= use only the main file to link
D <- D %>%
select(MID,year,age_mother) %>%
right_join(Ind) %>% #<- merge with individual file, keep all observations from Ind
filter(is.na(age_mother)) %>% #<- identify spouses by missing info from the merge
rename(FID=MID,snF=sn) %>% #<- rename variables for merge
filter(mpair>0) %>% #<- only keep individuals who are not mothers but who are in a relationship in the same household
select(FID,year,intnum,mpair,snF) %>%
right_join(D) %>% #<- do the merge
mutate(snF = replace_na(snF,-1)) #<- replace missing values.
# #  ---- load marriage info and create some summary variables
M <- read.csv("../../data-main/marriage/Marriage.csv") %>%
mutate(X = NULL) %>%
rename(MID = ID1) %>% #<- we rename to MID in preparation for a first merge with sample mothers
rename(ybirth = MH6) %>%
filter(ybirth<9998) %>% #<- drop individuals with missing birth info
rename(ymar = MH11) %>%
filter(ymar!=9998) %>% #<- remove individuals without marriage info
mutate(record = ymar<9999) %>% #<- ymar==9999 indicates never married
group_by(MID) %>%
summarise(ever_married = sum(record)>0,ybirth = ybirth[1])
D = M %>%
inner_join(D)
D <- D_Ind %>%
select(MID,year,age_mother) %>%
right_join(Ind) %>%
filter(is.na(age_mother)) %>% #<- pick out individuals from the merge who were *not* matched
rename(FID = MID,snF = sn) %>%
select(c("FID","year","intnum","mpair","snF")) %>%
filter(mpair>0) %>%
right_join(D)
D <- M %>%
rename(FID=MID,ybirthF = ybirth) %>%
right_join(D) %>%
mutate(f_age = year - ybirthF)
R <- read.csv("~/Dropbox/PSID_CDS/PSID_RAW/RaceHorizontal.csv") %>% mutate(X = NULL) %>%
rename(MID = ID)
educ <- read.csv("../../data-main/education/education.csv") %>%
mutate(X=NULL)
# cpi = read.csv("~/Dropbox/PSID_CDS/CPI-U.csv") %>%
#   rename(year = YEAR) %>%
#   mutate(CPIU = CPIU/CPIU[53])
D <- D %>% #<- drop if mother has missing race or education info
left_join(R) %>%
inner_join(educ,by = c("MID" = "ID")) %>%
rename(m_ed = ed) %>%
left_join(educ,by = c("FID" = "ID")) %>%
rename(f_ed = ed)
break
nrow(D)\
nrow(D)
nrow(D_Ind)
nrow(R)
nrow(educ)
nrow(C)
nrow(M)
nrow(Ind)
nrow(L)
#fix this first
S <- read.csv("../../data-main/state/state-vertical.csv")
nrow(S)
nrow(ch_care)
nrow(PC)
nrow(educ)
educ
nrow(educ)
nrow(R)
nrow(S)
nrow(L)
# get an index of CDS children
KID <- read.csv("../../data-cds/assessments/AssessmentPanel.csv") %>%
select(KID) %>%
unique()
child_record <- read.csv("../../data-main/childbirth/Childbirth.csv") %>%
mutate(X = NULL) %>% #<- load childbirth file
filter(CAH5==2)  %>% #keep only women
filter(CAH10!=0) %>% # drop women who have no children according to this file
filter(CAH7!=9998) %>% # drop women with missing birth year info
mutate(MID = CAH3*1000 + CAH4, KID = CAH10*1000 + CAH11) %>%
group_by(MID) %>%
filter(!any(CAH10 == 9999))
mother_index <- child_record %>%
select(MID,KID) %>%
inner_join(KID) %>%
select(MID) %>%
unique()
C <- child_record %>% #<- this matches the sample from before. All good.
inner_join(mother_index)
PC <- read.csv("../../data-cds/assessments/PCG-PC-clean.csv") %>% mutate(X=NULL)
MakePanel <- function(d) {
year <- (d$CAH7[1]+18):2017
Ny <- length(year)
knum = d$CAH108[1]
age_youngest <- integer(Ny) -1
age_oldest <- integer(Ny) + Inf
num_0_5 <- integer(Ny)
num_6_12 <- integer(Ny)
num_child <- integer(Ny)
age_mother = year-d$CAH7[1]
for (i in 1:length(year)) {
ay = Inf
ao = -1
a5 = 0
a6 = 0
for (k in 1:nrow(d)) {
agek = year[i]-d$CAH15[k]
if (agek>=0 & agek<=18) {
#print(agek)
ay = min(ay,agek)
ao = max(ao,agek)
num_child[i]  = num_child[i] + 1
}
if (agek>=0 & agek<=5) {
a5 = a5 + 1
}
if (agek>5 & agek<=12) {
a6 = a6 + 1
}
}
age_youngest[i] = ay
age_oldest[i] = ao
num_0_5[i] = a5
num_6_12[i] = a6
}
data.frame(MID = d$MID[1], age_mother=age_mother, year = year, knum = knum, num_child=num_child,age_youngest=age_youngest,age_oldest=age_oldest, num_0_5 = num_0_5, num_6_12 = num_6_12, y_first = d$CAH15[1])
}
D <- C %>%
group_by(MID) %>%
do(MakePanel(.)) %>%
filter(y_first>=1960) %>%
left_join(PC) # Add mother's cognitive score
Do <- D
M2 <- read.csv("~/Dropbox/JPE_Child_Devp_2020/PSID/CleanData/MotherPanelCDS.csv") %>%
mutate(X=NULL) %>%
filter(year>=1985,year<=2002)
D1 <- D %>% filter(year>=1985,year<=2002)
M2 %>%
select(MID,year) %>%
anti_join(D1) %>% #<- find members of M2 not in D
#merge(m1) %>% #<- check which of these are those in the final M1 but not in M2
nrow()
Ind = read.csv("../../data-main/identifiers/identifiers-panel.csv") %>%
mutate(X = NULL) %>%
mutate(MID = intnum68*1000 + pernum,mar_stat = mpair>0)
Ind <- Ind %>% filter(year>=1999) %>%
mutate(year = year - 1) %>%
rbind(Ind)
# this will be useful throughout: create a dataframe that maps mothers to their interview number and sequence number
D_Ind <- D %>%
inner_join(Ind)
# state codes measures residence for survey year
state_codes = read.csv("../../StateCodes.csv") %>%
mutate(X=NULL,X.1 = NULL) %>% #<- this is a simple crosswalk of state codes
select(-state) %>%
rename(state = PSID, StFIPS = fips) %>% #<- we rename some things in order to do the merge properly
select(state,StFIPS,SOI)
# child care expenditures are for previous year, so we have to be careful how we do the merge!
# we merge by survey year then subtract one year to make the reference correct
# then we drop intnum, using only MID and year to link with the main file in the next step
ch_care <- read.csv("~/Dropbox/PSID_CDS/PSID_CLEAN/Main_childcare.csv") %>%
mutate(X=NULL) %>%
inner_join(D_Ind) %>% #<- merge to mother's through the panel file
mutate(year = year-1) %>% #<- convert survey year to lag year
select(MID,year,childcare_exp)
D <- read.csv("../../data-main/state/state-vertical.csv") %>% #<- state of residence panel data
mutate(X=NULL) %>%
right_join(Ind) %>% #<- merge with Individual file
right_join(D) %>% #<- merge with the panel we created (keeping all years)
arrange(MID,year) %>%
group_by(MID) %>%
fill(state,.direction = "downup") %>% #<- fill in missing observations
merge(state_codes) %>% #<- merge in the cross-walk with FIPS codes and SOI codes
left_join(ch_care) #<= use only the main file to link
D <- D %>%
select(MID,year,age_mother) %>%
right_join(Ind) %>% #<- merge with individual file, keep all observations from Ind
filter(is.na(age_mother)) %>% #<- identify spouses by missing info from the merge
rename(FID=MID,snF=sn) %>% #<- rename variables for merge
filter(mpair>0) %>% #<- only keep individuals who are not mothers but who are in a relationship in the same household
select(FID,year,intnum,mpair,snF) %>%
right_join(D) %>% #<- do the merge
mutate(snF = replace_na(snF,-1)) #<- replace missing values.
# #  ---- load marriage info and create some summary variables
M <- read.csv("../../data-main/marriage/Marriage.csv") %>%
mutate(X = NULL) %>%
rename(MID = ID1) %>% #<- we rename to MID in preparation for a first merge with sample mothers
rename(ybirth = MH6) %>%
filter(ybirth<9998) %>% #<- drop individuals with missing birth info
rename(ymar = MH11) %>%
filter(ymar!=9998) %>% #<- remove individuals without marriage info
mutate(record = ymar<9999) %>% #<- ymar==9999 indicates never married
group_by(MID) %>%
summarise(ever_married = sum(record)>0,ybirth = ybirth[1])
D = M %>%
inner_join(D)
D <- D_Ind %>%
select(MID,year,age_mother) %>%
right_join(Ind) %>%
filter(is.na(age_mother)) %>% #<- pick out individuals from the merge who were *not* matched
rename(FID = MID,snF = sn) %>%
select(c("FID","year","intnum","mpair","snF")) %>%
filter(mpair>0) %>%
right_join(D)
D <- M %>%
rename(FID=MID,ybirthF = ybirth) %>%
right_join(D) %>%
mutate(f_age = year - ybirthF)
R <- read.csv("~/Dropbox/PSID_CDS/PSID_RAW/RaceHorizontal.csv") %>% mutate(X = NULL) %>%
rename(MID = ID)
educ <- read.csv("../../data-main/education/education.csv") %>%
mutate(X=NULL)
# cpi = read.csv("~/Dropbox/PSID_CDS/CPI-U.csv") %>%
#   rename(year = YEAR) %>%
#   mutate(CPIU = CPIU/CPIU[53])
D <- D %>% #<- drop if mother has missing race or education info
left_join(R) %>%
inner_join(educ,by = c("MID" = "ID")) %>%
rename(m_ed = ed) %>%
left_join(educ,by = c("FID" = "ID")) %>%
rename(f_ed = ed)
L <- read.csv("../../data-main/labor-market/earnings-panel.csv") %>%
mutate(X = NULL) #<- contains the hours and earnings of the "head" and the "wife" which can be matched to individuals via sequence number
L <- D %>%
select(MID,FID,year,intnum,sn,snF) %>%
inner_join(L) %>% #<- merge based on year and interview number
mutate(m_hrs = case_when(sn==1 ~ hours_head,sn==2 ~ hours_spouse),m_earn = case_when(sn==1 ~ earn_head,sn==2 ~ earn_spouse)) %>%
mutate(f_hrs = case_when(snF==1 ~ hours_head,snF==2 ~ hours_spouse),f_earn = case_when(snF==1 ~ earn_head,snF==2 ~ earn_spouse)) %>%
mutate(m_wage = m_earn/m_hrs,f_wage = f_earn/f_hrs) %>%
select(MID,year,m_earn,m_hrs,m_wage,f_earn,f_hrs,f_wage) %>% #<- we don't keep FID because the coupling MID,FID is dynamic and may not match the pair (MID,FID) from the previous year when we merge these data back in
mutate(year = year - 1) #<- these variable refer to the previous year so we subtract one
break
# get an index of CDS children
KID <- read.csv("../../data-cds/assessments/AssessmentPanel.csv") %>%
select(KID) %>%
unique()
child_record <- read.csv("../../data-main/childbirth/Childbirth.csv") %>%
mutate(X = NULL) %>% #<- load childbirth file
filter(CAH5==2)  %>% #keep only women
filter(CAH10!=0) %>% # drop women who have no children according to this file
filter(CAH7!=9998) %>% # drop women with missing birth year info
mutate(MID = CAH3*1000 + CAH4, KID = CAH10*1000 + CAH11) %>%
group_by(MID) %>%
filter(!any(CAH10 == 9999))
mother_index <- child_record %>%
select(MID,KID) %>%
inner_join(KID) %>%
select(MID) %>%
unique()
C <- child_record %>% #<- this matches the sample from before. All good.
inner_join(mother_index)
PC <- read.csv("../../data-cds/assessments/PCG-PC-clean.csv") %>% mutate(X=NULL)
MakePanel <- function(d) {
year <- (d$CAH7[1]+18):2017
Ny <- length(year)
knum = d$CAH108[1]
age_youngest <- integer(Ny) -1
age_oldest <- integer(Ny) + Inf
num_0_5 <- integer(Ny)
num_6_12 <- integer(Ny)
num_child <- integer(Ny)
age_mother = year-d$CAH7[1]
for (i in 1:length(year)) {
ay = Inf
ao = -1
a5 = 0
a6 = 0
for (k in 1:nrow(d)) {
agek = year[i]-d$CAH15[k]
if (agek>=0 & agek<=18) {
#print(agek)
ay = min(ay,agek)
ao = max(ao,agek)
num_child[i]  = num_child[i] + 1
}
if (agek>=0 & agek<=5) {
a5 = a5 + 1
}
if (agek>5 & agek<=12) {
a6 = a6 + 1
}
}
age_youngest[i] = ay
age_oldest[i] = ao
num_0_5[i] = a5
num_6_12[i] = a6
}
data.frame(MID = d$MID[1], age_mother=age_mother, year = year, knum = knum, num_child=num_child,age_youngest=age_youngest,age_oldest=age_oldest, num_0_5 = num_0_5, num_6_12 = num_6_12, y_first = d$CAH15[1])
}
D <- C %>%
group_by(MID) %>%
do(MakePanel(.)) %>%
filter(y_first>=1960) %>%
left_join(PC) # Add mother's cognitive score
Do <- D
M2 <- read.csv("~/Dropbox/JPE_Child_Devp_2020/PSID/CleanData/MotherPanelCDS.csv") %>%
mutate(X=NULL) %>%
filter(year>=1985,year<=2002)
D1 <- D %>% filter(year>=1985,year<=2002)
M2 %>%
select(MID,year) %>%
anti_join(D1) %>% #<- find members of M2 not in D
#merge(m1) %>% #<- check which of these are those in the final M1 but not in M2
nrow()
Ind = read.csv("../../data-main/identifiers/identifiers-panel.csv") %>%
mutate(X = NULL) %>%
mutate(MID = intnum68*1000 + pernum,mar_stat = mpair>0)
Ind <- Ind %>% filter(year>=1999) %>%
mutate(year = year - 1) %>%
rbind(Ind)
# this will be useful throughout: create a dataframe that maps mothers to their interview number and sequence number
D_Ind <- D %>%
inner_join(Ind)
# state codes measures residence for survey year
state_codes = read.csv("../../StateCodes.csv") %>%
mutate(X=NULL,X.1 = NULL) %>% #<- this is a simple crosswalk of state codes
select(-state) %>%
rename(state = PSID, StFIPS = fips) %>% #<- we rename some things in order to do the merge properly
select(state,StFIPS,SOI)
# child care expenditures are for previous year, so we have to be careful how we do the merge!
# we merge by survey year then subtract one year to make the reference correct
# then we drop intnum, using only MID and year to link with the main file in the next step
ch_care <- read.csv("~/Dropbox/PSID_CDS/PSID_CLEAN/Main_childcare.csv") %>%
mutate(X=NULL) %>%
inner_join(D_Ind) %>% #<- merge to mother's through the panel file
mutate(year = year-1) %>% #<- convert survey year to lag year
select(MID,year,childcare_exp)
D <- read.csv("../../data-main/state/state-vertical.csv") %>% #<- state of residence panel data
mutate(X=NULL) %>%
right_join(Ind) %>% #<- merge with Individual file
right_join(D) %>% #<- merge with the panel we created (keeping all years)
arrange(MID,year) %>%
group_by(MID) %>%
fill(state,.direction = "downup") %>% #<- fill in missing observations
merge(state_codes) %>% #<- merge in the cross-walk with FIPS codes and SOI codes
left_join(ch_care) #<= use only the main file to link
D <- D %>%
select(MID,year,age_mother) %>%
right_join(Ind) %>% #<- merge with individual file, keep all observations from Ind
filter(is.na(age_mother)) %>% #<- identify spouses by missing info from the merge
rename(FID=MID,snF=sn) %>% #<- rename variables for merge
filter(mpair>0) %>% #<- only keep individuals who are not mothers but who are in a relationship in the same household
select(FID,year,intnum,mpair,snF) %>%
right_join(D) %>% #<- do the merge
mutate(snF = replace_na(snF,-1)) #<- replace missing values.
# #  ---- load marriage info and create some summary variables
M <- read.csv("../../data-main/marriage/Marriage.csv") %>%
mutate(X = NULL) %>%
rename(MID = ID1) %>% #<- we rename to MID in preparation for a first merge with sample mothers
rename(ybirth = MH6) %>%
filter(ybirth<9998) %>% #<- drop individuals with missing birth info
rename(ymar = MH11) %>%
filter(ymar!=9998) %>% #<- remove individuals without marriage info
mutate(record = ymar<9999) %>% #<- ymar==9999 indicates never married
group_by(MID) %>%
summarise(ever_married = sum(record)>0,ybirth = ybirth[1])
D = M %>%
inner_join(D)
D <- D_Ind %>%
select(MID,year,age_mother) %>%
right_join(Ind) %>%
filter(is.na(age_mother)) %>% #<- pick out individuals from the merge who were *not* matched
rename(FID = MID,snF = sn) %>%
select(c("FID","year","intnum","mpair","snF")) %>%
filter(mpair>0) %>%
right_join(D)
D <- M %>%
rename(FID=MID,ybirthF = ybirth) %>%
right_join(D) %>%
mutate(f_age = year - ybirthF)
R <- read.csv("~/Dropbox/PSID_CDS/PSID_RAW/RaceHorizontal.csv") %>% mutate(X = NULL) %>%
rename(MID = ID)
educ <- read.csv("../../data-main/education/education.csv") %>%
mutate(X=NULL)
# cpi = read.csv("~/Dropbox/PSID_CDS/CPI-U.csv") %>%
#   rename(year = YEAR) %>%
#   mutate(CPIU = CPIU/CPIU[53])
D <- D %>% #<- drop if mother has missing race or education info
left_join(R) %>%
inner_join(educ,by = c("MID" = "ID")) %>%
rename(m_ed = ed) %>%
left_join(educ,by = c("FID" = "ID")) %>%
rename(f_ed = ed)
break
nrow(D)
size(D)
length(names(D))
L <- read.csv("../../data-main/labor-market/earnings-panel.csv") %>%
mutate(X = NULL) #<- contains the hours and earnings of the "head" and the "wife" which can be matched to individuals via sequence number
L <- D %>%
select(MID,FID,year,intnum,sn,snF) %>%
inner_join(L) %>% #<- merge based on year and interview number
mutate(m_hrs = case_when(sn==1 ~ hours_head,sn==2 ~ hours_spouse),m_earn = case_when(sn==1 ~ earn_head,sn==2 ~ earn_spouse)) %>%
mutate(f_hrs = case_when(snF==1 ~ hours_head,snF==2 ~ hours_spouse),f_earn = case_when(snF==1 ~ earn_head,snF==2 ~ earn_spouse)) %>%
mutate(m_wage = m_earn/m_hrs,f_wage = f_earn/f_hrs) %>%
select(MID,year,m_earn,m_hrs,m_wage,f_earn,f_hrs,f_wage) %>% #<- we don't keep FID because the coupling MID,FID is dynamic and may not match the pair (MID,FID) from the previous year when we merge these data back in
mutate(year = year - 1) #<- these variable refer to the previous year so we subtract one
nrow(L)
T2 <- read.csv("../../data-main/labor-market/T2clean.csv")
# we link first to mothers:
T2m <- D %>%
select(MID) %>%
unique() %>%
inner_join(T2) %>% #<- first four lines pick out mothers in CDS sample
rename(m_earn = earn,m_hrs = hrs) %>%
mutate(m_wage = m_earn/m_hrs) %>%
select(MID,year,m_earn,m_wage,m_hrs) #<- these are mothers so drop the FID variable
# and then to fathers
T2f <- D %>%
select(FID) %>%
unique() %>%
inner_join(T2) %>% #<-first four lines pick out "fathers" in sample (recall we are labelling all spouses as fathers)
rename(f_earn = earn,f_hrs = hrs) %>%
mutate(f_wage = f_earn/f_hrs) %>%
select(FID,year,f_earn,f_wage,f_hrs) #<- these are fathers so drop the MID variable
# now we link the pair (MID,FID,year) first to mothers (MID,year) and then to fathers (MID,year), *then* we append all of this to the data from the main interview
D <- D %>%
select(MID,FID,year) %>%
inner_join(T2m) %>%
left_join(T2f) %>%
select(-FID) %>%
rbind(L) %>% #<- add all of this to the original data frame with the interview year questions
mutate(house_earn = case_when(!is.na(f_earn) ~ f_earn+m_earn,TRUE ~ m_earn),m_wage = na_if(na_if(m_wage,Inf),0),f_wage = na_if(na_if(f_wage,Inf),0)) %>%
right_join(D) #%>%
nrow(D)
